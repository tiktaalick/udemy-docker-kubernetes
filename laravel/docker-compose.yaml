version: '3.8'

services:
  server:
    # NGINX is open source software for web serving, reverse proxying, caching, load balancing, media streaming, and
    # more. It started out as a web server designed for maximum performance and stability.
    # image: 'nginx:stable-alpine'
    build:
      context: .
      dockerfile: dockerfiles/nginx.dockerfile
    ports:
      - '8000:80'
    volumes:
      - ./src:/var/www/html
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - php
      - mysql
  php:
    # This is the PHP interpreter that interprets its working directory, as defined in the php.dockerfile, which has to
    # be bound to a folder on the host machine so that the contents of that folder could be interpreted.
    build:
      context: .
      dockerfile: dockerfiles/php.dockerfile
    # Delegated improves the performance by sending over new data in batches.
    volumes:
      - ./src:/var/www/html:delegated
  mysql:
    image: mysql:5.7
    env_file:
      - ./env/mysql.env
  composer:
    # Utility container. Composer is a tool for dependency management in PHP. It allows you to declare the libraries
    # your project depends on and it will manage (install/update) them for you.
    build:
      context: ./dockerfiles
      dockerfile: composer.dockerfile
    volumes:
      - ./src:/var/www/html
  artisan:
    # Utility container. The Laravel PHP artisan serve command helps running applications on the PHP development server. As a developer, you can use
    # Laravel artisan serve to develop and test various functions within the application. It also accepts two additional options. You can use the host
    # for changing application's address and port.
    build:
      context: .
      dockerfile: dockerfiles/php.dockerfile
    volumes:
      - ./src:/var/www/html
    entrypoint: ['php', '/var/www/html/artisan']
  npm:
    image: node:14
    working_dir: /var/www/html
    entrypoint: ['npm']
    volumes:
      - ./src:/var/www/html
